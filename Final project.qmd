---
title: "Final project"
format: html
---
```{r}
library(readr)
library(sf)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(tmap)
```

```{r}
posmo_MK <- read_delim("Data/posmo_join.csv")
str(posmo_MK)

posmo_walk <- filter (posmo_MK, transport_mode == "Walk")
posmo_walk <- select(posmo_walk, datetime, lon_x, lat_y, trajectoryID, type)
posmo_walk <- st_as_sf(posmo_walk,
    coords = c("lon_x", "lat_y"),
    crs = 4326)

posmo_walk <- st_transform(posmo_walk, 2056)

#Pre-processing.
# Separate x and y coordinates in separate columns, separate date and time in different columns.

posmo_walk <- st_transform(posmo_walk, 2056)#convert the coordinate system to CH1903+ LV95: EPSG:2056

# import Weather Data
precip_data <- read_delim("data/weather_data.csv") |> 
  select(-tre200s0, -sre000z0)

# filter SHA weather station
precip_SHA <- precip_data |> filter(stn == "SHA") |> rename(datetime = time)

# Import Posmo data MN
# filter walk transportmode, select only necessary columns, and transform data frame into sf object and transform it into EPSG 2056 coordinate system
posmo_MN <- read_delim("data/posmo_MN_edited.csv", delim = ";") |> 
  filter(transport_mode == "Walk") |> 
  select(user_id, datetime, weekday, lon_x, lat_y, trajectoryID, Type, Shape) |> 
  st_as_sf(coords = c("lon_x","lat_y"), crs = 4326)|>
  st_transform(2056)

```


```{r}
# store the coordinates into two separate columns
posmoMK_coordinates <- st_coordinates(posmo_walk)

posmo <- cbind(posmo_walk, posmoMK_coordinates)
str(posmo)


#posmo$Date <- date(posmo$datetime)
#posmo$Time <- format(posmo$datetime, format = "%H:%M:%S")

is.POSIXt(posmo$datetime)

posmo$Date <- date(posmo$datetime)
posmo$Time <- format(posmo$datetime, format = "%H:%M:%S")


posmo
ggplot(posmo, aes(X, Y))+
  geom_path()+
    geom_point()+

    coord_fixed()

#Removal of static points

coord_fixed()

# the same with MN Data
posmoMN_coordinates <- st_coordinates(posmo_MN)

posmo_MN <- cbind(posmo_MN, posmoMN_coordinates) |> 
  mutate(
    Date = date(datetime),
    Time = format(datetime, format = "%H:%M:%S")
    )

ggplot(posmo_MN, aes(X, Y))+
  geom_path()+
  geom_point()+
  coord_fixed()

```

#Speed

```{r}
posmo <- posmo |> 
    group_by(Trajectory)|> 
    mutate(timelag = as.numeric(difftime(lead(datetime), datetime)), units = "secs")

posmo <- posmo |>
  group_by(Trajectory) |> 
  mutate(steplenght = sqrt ((X-lead(X))^2 + (Y-lead(Y))^2))|>
  mutate(speed = steplenght/timelag)

speed <- posmo |> 
  group_by(Trajectory) |>  
  filter(timelag > 0)|>   
  filter(speed > 0)|>
  summarise(average.speed = mean(speed, na.rm = TRUE))

```
#Duration

```{r}
duration <- posmo |> 
  group_by(Trajectory) |>  
  summarise(end = max(Time), start = min(Time))

duration$end <- as.POSIXct(duration$end, tz = "UTC", "%H:%M:%OS")
duration$start <- as.POSIXct(duration$start, tz = "UTC", "%H:%M:%OS")
str(duration)


duration <- duration |> 
  rowwise() |>
  mutate(duration = as.numeric(difftime(end, start)), units = "mins")

#devtools::install_github("benmarwick/wordcountaddin",  type = "source", dependencies = TRUE)

```



```{r}
str(posmo)


#To calculate distance among  observation 1 and 2 back and forward.
posmo <- posmo |>
  group_by(trajectoryID) |> 

T1a <- ggplot(T1, aes(X, Y))+
  geom_path()+
  geom_point()+
  coord_fixed()

#To calculate the step-length among  observation 1 and 2 back and forward.
T1step <- T1 |>
   mutate(
      n_plus1 = sqrt ((lead(X, 1) - X)^2 + (lead(Y, 1)-Y)^2), 
      n_plus2 = sqrt ((lead(X, 2) - X)^2 + (lead(Y, 2)-Y)^2),
      nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2),
      nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2)
)

 posmo <- posmo  |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, n_plus1, n_plus2))
    ) |>
    ungroup()
 
 ggplot(posmo, aes(stepMean)) +
  geom_histogram(binwidth = 5) +
  geom_vline(xintercept = mean(posmo$stepMean, na.rm = TRUE))
 
#Remove static points by applying threshold,  the threshold is the average step Mean. 
 
posmo <- posmo |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

posmo_filter <- posmo |>
    filter(!static)

which(posmo$stepMean> 100)
which(posmo$stepMean> 50 )


#posmo |> mutate(steplenght_large = steplenght>60)

```
 Trajectories visualization

```{r}

T1 <- posmo %>%
  filter(trajectoryID == "T1")

T1_filter <- posmo_filter %>%
  filter(trajectoryID == "T1")
  
T1a <- ggplot(T1, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()

T1b <- ggplot(T1_filter, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

library("cowplot")
plot_grid(T1a, T1b, 
          labels = c("A", "B"),
          ncol = 2, nrow = 1)

#write.csv(T1, file = "T1.csv")

```



How would it look like if we plot by date? It doesn't work because it connects the last location from the earlier trajectory with the first location of the following trajectory

```{r}
M24 <- posmo %>%
  filter(trajectoryID == "24")

M24_filter <- posmo_filter %>%
  filter(trajectoryID == "24")
  
M24a <- ggplot(M24, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()

M24b <- ggplot(M24_filter, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

#to visualize the raw trajectory and the trajectory with the static points removed
library("cowplot")
plot_grid(M24a, M24b, 
          labels = c("Raw", "Static points removed"),
          ncol = 2, nrow = 1)
```

```{r}
T41 <- posmo %>%
  filter(trajectoryID == "T41")
T41_filter <- posmo_filter %>%
  filter(trajectoryID == "T41")

T41a <- ggplot(T41, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()


T41b <- ggplot(T41_filter, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

library("cowplot")
plot_grid(T41a, T41b, 
          labels = c("Raw", "Static points removed"),
          ncol = 2, nrow = 1)

#write.csv(T1, file = "T1.csv")

#function to create a unique ID for each segment
#rle_id <- function(vec) {
#    x <- rle(vec)$lengths
#    as.factor(rep(seq_along(x), times = x))
#}
#T41_filter <- T41_filter |>
#    mutate(segment_id = rle_id(static))

#ggplot(T41_filter, aes(X, Y))+
#  geom_path()+
#  geom_point(aes(color = segment_id))+
#  coord_fixed()
```


```{r}

T2 <- posmo %>%
  filter(Trajectory == "T2")

ggplot(T2, aes(X, Y))+
  geom_path()+
  geom_point()+coord_fixed()

T3 <- posmo %>%
  filter(Trajectory == "T3")

ggplot(T3, aes(X, Y))+
  geom_path()+
  geom_point()+coord_fixed()

T8 <- posmo %>%
  filter(Trajectory == "T8")

ggplot(T8, aes(X, Y))+
  geom_path()+
    geom_point()+coord_fixed()
```

#Timelag. 
How often was the position recorded. Calculated for the trajectories with and without (posmo_filter) static points
```{r}
posmo <- posmo |> 
    group_by(trajectoryID)|> 
    mutate(timelag = as.numeric(difftime(lead(datetime), datetime, units = "secs")))

posmo_filter <- posmo_filter |> 
    group_by(trajectoryID)|> 
    mutate(timelag = as.numeric(difftime(lead(datetime), datetime, units = "secs")))

 ggplot(posmo, aes(timelag)) +
  geom_histogram(binwidth = 5) +
  geom_vline(xintercept = mean(posmo$timelag, na.rm = TRUE))

which(posmo$timelag> 300)#The threshold was set at 300 (15*20), sometimes we had pauses of up to 20 minutes during the walks that recorded the same location several times
which(posmo$timelag> 1000)
 
```

```{r}
library(tmap)
tmap_mode("view")
posmo[330:340,] |> tm_shape() + tm_dots()

posmo[330:340,] |> tm_shape() + tm_dots()

posmo[4828:4835,] |> tm_shape() + tm_dots()

posmo[5830:5840,] |> tm_shape() + tm_dots()

```


#Steplenght and speed calculation

```{r}
#calculation with the whole trajectories 
posmo <- posmo |>
  group_by(trajectoryID) |> 
  mutate(steplenght = sqrt ((X-lead(X))^2 + (Y-lead(Y))^2))|>
  mutate(speed = steplenght/timelag)|>
  mutate(duration = (max(datetime)- min(datetime))/60)|>
  mutate(distance = sum(steplenght, na.rm = TRUE))

#calculation with the trajectories without static points
posmo_filter <- posmo_filter |>
  group_by(trajectoryID) |> 
  mutate(steplenght = sqrt ((X-lead(X))^2 + (Y-lead(Y))^2))|>
  mutate(speed = steplenght/timelag)|>
  mutate(duration = (max(datetime)- min(datetime))/60)|>
  mutate(distance = sum(steplenght, na.rm = TRUE))


#posmo$steplenght |> hist()
#posmo_filter$steplenght |> hist()

#which(posmo$steplenght> 100)
#which(posmo_filter$steplenght>100 )


#posmo |> mutate(steplenght_large = steplenght>60)


```

#Visualization of parameters

```{r}
ggplot(posmo, mapping = aes(type, steplenght))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Steplenght")+
  theme_light()  

ggplot(posmo, mapping = aes(type, speed))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Speed")+
  theme_light()

ggplot(posmo_filter, mapping = aes(type, speed))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Speed")+
  theme_light()

ggplot(posmo, mapping = aes(type, distance))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Distance")+
  theme_light()
```

#Calculation of average speed by trajectory and by type of walk

```{r}
speed <- posmo_filter |> 
  group_by(trajectoryID) |>  
  filter(timelag > 0)|>   
  filter(speed > 0)|>
  summarise(average.speed = mean(speed, na.rm = TRUE))

type.walk <- posmo |> 
  group_by(type) |>  
  filter(timelag > 0)|>   
  filter(speed > 0)|>
  summarise(average.speed = mean(speed, na.rm = TRUE))




```


#devtools::install_github("benmarwick/wordcountaddin",  type = "source", dependencies = TRUE)

```


#S

```{r}
arealstat_csv <- read_csv("data-raw/arealstatistik/ag-b-00.03-37-nolc04/AREA_NOLC04_27_161114.csv",                          col_types = cols_only(X = col_integer(), Y = col_integer(),LC09_27 = col_integer(),LC09_6 = col_integer())) %>%  transmute(E = X + 2e6, N = Y + 1e6, hauptbereiche6 = LC09_6, grundkat27 = LC09_27) # This is not a precise transformation 21781 > 2056 but it seems this method was used on the newer data as wellarealstat_hauptbereiche <- arealstat_csv %>% dplyr::select(E,N,hauptbereiche6) %>%  rasterFromXYZ() %>%  terra::rast()
terra::crs(arealstat_hauptbereiche) <- "EPSG: 2056" 
arealstat_grundkategorien <- arealstat_csv %>%  dplyr::select(E,N,grundkat27) %>%  rasterFromXYZ() %>%  terra::rast()terra::crs(arealstat_grundkategorien) <- "EPSG: 2056"# usethis::use_data(arealstat_hauptbereiche, overwrite = TRUE) # usethis::use_data(arealstat_grundkategorien, overwrite = TRUE) terra::writeRaster(arealstat_grundkategorien, "inst/extdata/arealstat_boden_grundkategrien.tif", overwrite = TRUE, datatype = "INT1U") terra::writeRaster(arealstat_hauptbereiche, "inst/extdata/arealstat_boden_hauptbereiche.tif", overwrite = TRUE, datatype = "INT1U")
```

