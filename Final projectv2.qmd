---
title: "Final project"
format: html
---
```{r}
library(sf)
library(tidyverse)
library(tmap)
library(cowplot)
library(lubridate)
library(dplyr)
library(plotly)
library(tmap)
```


#Import data,  handle spatial data and project the coordinates into the new Swiss CRS CH1903+ LV95. Data from two individuals: MK and MM
```{r}
# Import data
# filter walk transport mode, select only necessary columns, and transform data frame into sf object and transform it into EPSG 2056 coordinate system

#Import Posmo data MK
posmo_MK <- read_delim("data/posmo_MK_edited3.csv", delim = ";") |> 
  filter(transport_mode == "Walk") |> 
  select(user_id, datetime, weekday, lon_x, lat_y, trajectoryID, Type, Shape) |> 
  st_as_sf(coords = c("lon_x","lat_y"), crs = 4326)|>
  st_transform(2056)


# Import Posmo data MN
posmo_MN <- read_delim("data/posmo_MN_edited3.csv", delim = ";") |> 
  filter(transport_mode == "Walk") |> 
  select(user_id, datetime, weekday, lon_x, lat_y, trajectoryID, Type, Shape) |> 
  st_as_sf(coords = c("lon_x","lat_y"), crs = 4326)|>
  st_transform(2056)


str(posmo_MK)
str(posmo_MN)

# import Weather Data with only the relevant columns
precip_data <- read_delim("data/weather_data.csv") |> 
  select(-tre200s0, -sre000z0)

precip_hinwil <- read_delim("data/weather_hinwil.csv")

# filter SHA weather station
precip_SHA <- precip_data |> filter(stn == "SHA") |> rename(datetime = time)
precip_SHA$datetime <- as.POSIXct(precip_SHA$datetime, tz = "UTC") # convert character into POSIXct

# HIW weather station
precip_HIW <- precip_hinwil |> rename(datetime = time) |> rename(rco150z0 = rre150z0)
precip_HIW$datetime <- as.POSIXct(precip_HIW$datetime, tz = "UTC") # convert character into POSIXct
```

#Pre-processing
```{r}
# store the coordinates into two separate columns
posmo_coordinates <- st_coordinates(posmo_MK)

posmo_MK <- cbind(posmo_MK, posmo_coordinates)

str(posmo_MK)

# the same with MN Data
posmoMN_coordinates <- st_coordinates(posmo_MN)

posmo_MN <- cbind(posmo_MN, posmoMN_coordinates)

```

#calculate longest distance from each trajectory to home for the two data sets
```{r}
#Create an sf object with the house coordinates
house_MK <- read_delim("data/MK_house.csv") |> 
  st_as_sf(coords = c("lon_x","lat_y"), crs = 4326)|>
  st_transform(2056)

houseMK_coordinates <- st_coordinates(house_MK)

house_MK <- cbind(house_MK, houseMK_coordinates)


#The same with MN 
house_MN <- read_delim("data/MN_house.csv") |> 
  st_as_sf(coords = c("lon_x","lat_y"), crs = 4326)|>
  st_transform(2056)

houseMN_coordinates <- st_coordinates(house_MN)

house_MN <- cbind(house_MN, houseMN_coordinates)

#Calculate the max distance from the house for each trajectory
posmo_MK$distance_home <- as.numeric(st_distance(posmo_MK, house_MK)[,1])
 
posmo_MK <- posmo_MK |>
  group_by(trajectoryID) |>
  mutate(max_distance = max(distance_home))

#the same for MN
posmo_MN$distance_home <- as.numeric(st_distance(posmo_MN, house_MN)[,1])
 
posmo_MN <- posmo_MN |>
  group_by(trajectoryID) |>
  mutate(max_distance = max(distance_home))

```


##Join posmo data with weather data then join the two dataframes
```{r}
# Create new column with time values rounded to closest 10 minutes, to be able to join with weather data
posmo_MN <- posmo_MN |> mutate(
  Datetime_round = lubridate::round_date(datetime,"10 minutes")
)

posmo_MK <- posmo_MK |> mutate(
  Datetime_round = lubridate::round_date(datetime,"10 minutes")
)
# Join posmo data with weather data
posmo_weather_MN <- left_join(posmo_MN, precip_SHA, by = c("Datetime_round" = "datetime"))

posmo_weather_MK <- left_join(posmo_MK, precip_HIW, by = c("Datetime_round" = "datetime"))

# Delete double timestamps
posmo_weather_MN <- posmo_weather_MN |> 
  distinct(datetime, .keep_all = TRUE)

# Add new column for rain/no rain
posmo_weather_MN$precip[posmo_weather_MN$rco150z0 == 0] <- "no"
posmo_weather_MN$precip[posmo_weather_MN$rco150z0 > 0] <- "yes"

posmo_weather_MK$precip[posmo_weather_MK$rco150z0 == 0] <- "no"
posmo_weather_MK$precip[posmo_weather_MK$rco150z0 > 0] <- "yes"

#Join the two data frames vertically
posmo <- rbind(posmo_weather_MN, posmo_weather_MK)


# Get trajectories with precipitation >50% of the time 
posmo |>
  group_by(trajectoryID) |>
  summarise(percent = length(which(precip == "yes")) / n()) |>
  filter(percent >= 0.5)


# Add a new column wday for Weekday/Weekend
posmo$wday <- ifelse(posmo$weekday %in% c("Sat", "Sun"), "weekend", "weekday") 

#Add a new column start with the time at which the trajectory started and separate the time with format H and M
posmo <- posmo |>
  group_by(trajectoryID) |> 
  mutate(start = min(datetime))

posmo$start <- format(as.POSIXct(posmo$start, format = "%H:%M"))

# Add a new column time_of_day for Morning/Afternoon/Evening
breaks <- hour(hm("3:00", "10:00", "16:00", "21:59"))
labels <- c("Morning", "Afternoon", "Evening")

posmo$time_of_day <- cut(x=hour(posmo$start), breaks = breaks, labels = labels, include.lowest=TRUE)

# Summarise the trajectory shapes
shape_summary <- posmo |>
  group_by(trajectoryID, Shape) |> 
  summarise() |>
  ungroup() |>
  group_by(Shape) |>
  summarise(count = n()) |>
  st_drop_geometry() |>
  mutate(percent = round(count / sum(count) * 100, 2))


# Summarise the walk types (recreational/functional)
Type_summary <- posmo |>
  group_by(trajectoryID, Type) |> 
  summarise() |>
  ungroup() |>
  group_by(Type) |>
  summarise(count = n()) |>
  st_drop_geometry() |>
  mutate(percent = round(count / sum(count) * 100, 2))


# Summarise the walks with precipitation/no Precipitation
precip_summary <- posmo |>
  group_by(trajectoryID, precip) |> 
  summarise() |>
  ungroup() |>
  group_by(precip) |>
  summarise(count = n()) |>
  st_drop_geometry() |>
  mutate(percent = round(count / sum(count) * 100, 2))

# calculate average distance for recreational/functional walks
dist_summary <- posmo |>
  group_by(Type, distance) |> 
  summarise() |> 
  st_drop_geometry()
 
mean(dist_summary$distance[1:33]) # average distance of functional walks 1322.05 m
mean(dist_summary$distance[34:103]) # average distance of recreational walks 4472.65 m
  
  

```


#EDA. Plotting all the trajectories with Tmap to identify points that don't belong into the trajectores
```{r}
tmap_mode("view")
T1 <- posmo %>%
  filter(trajectoryID == "T1")
T1 |> tm_shape() + tm_dots()

T2 <- posmo %>%
  filter(trajectoryID == "T2")
T2 |> tm_shape() + tm_dots()

T3 <- posmo %>%
  filter(trajectoryID == "T3")
T3 |> tm_shape() + tm_dots()

T4 <- posmo %>%
  filter(trajectoryID == "T4")
T4 |> tm_shape() + tm_dots()

T5 <- posmo %>%
  filter(trajectoryID == "T5")
T5 |> tm_shape() + tm_dots()

T6 <- posmo %>%
  filter(trajectoryID == "T6")
T6 |> tm_shape() + tm_dots()

T7 <- posmo %>%
  filter(trajectoryID == "T7")
T7 |> tm_shape() + tm_dots()

T8 <- posmo %>%
  filter(trajectoryID == "T8")
T8 |> tm_shape() + tm_dots()

T9 <- posmo %>%
  filter(trajectoryID == "T9")
T9 |> tm_shape() + tm_dots()

T10 <- posmo %>%
  filter(trajectoryID == "T10")
T10 |> tm_shape() + tm_dots()

T29 <- posmo %>%
  filter(trajectoryID == "T29")
T29 |> tm_shape() + tm_dots()

T48 <- posmo %>%
  filter(trajectoryID == "T48")
T48 |> tm_shape() + tm_dots()

T39 <- posmo %>%
  filter(trajectoryID == "T39")
T39 |> tm_shape() + tm_dots()


```

```{r}

N12 <- posmo %>%
  filter(trajectoryID == "7")
N12|> tm_shape() + tm_dots()

```

#Remove static points from trajectories. posmo-filter contains the trajectories without static points
```{r}
str(posmo)

#To calculate distance among  Time-stamp 1 and 2 back and forward.
posmo <- posmo |>
  group_by(trajectoryID) |> 
  mutate(
      n_plus1 = sqrt ((lead(X, 1) - X)^2 + (lead(Y, 1)-Y)^2), 
      n_plus2 = sqrt ((lead(X, 2) - X)^2 + (lead(Y, 2)-Y)^2),
      nMinus1 = sqrt((lag(X, 1) - X)^2 + (lag(Y, 1) - Y)^2),
      nMinus2 = sqrt((lag(X, 2) - X)^2 + (lag(Y, 2) - Y)^2)
)

 posmo <- posmo  |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus2, nMinus1, n_plus1, n_plus2))
    ) |>
    ungroup()
 
 ggplot(posmo, aes(stepMean)) +
  geom_histogram(binwidth = 5) +
  geom_vline(xintercept = mean(posmo$stepMean, na.rm = TRUE))
 
which(posmo$stepMean> 100)
which(posmo$stepMean> 50 )
 
#Remove static points by applying threshold,  the threshold is the average step Mean. 
 posmo <- posmo |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

posmo_filter <- posmo |>
    filter(!static)


```

# Visualization of all trajectories for both users
```{r}
tmap_mode("view") 
posmo |> tm_shape() + tm_dots()# both users

posmo |> filter(user_id == "Margarita") |> tm_shape() + tm_dots()# Margarita

posmo |> filter(user_id == "Mirjam") |> tm_shape() + tm_dots()# Mirjam

# Visualization of all trajectories of MN
posmo_MN |> 
  ggplot(aes(X, Y, group = trajectoryID)) +
  geom_path(col = "black", alpha = 0.3, size = 0.6) +
  coord_equal(ratio = 1) +
  theme(legend.position = "none") +
  theme_minimal()+
  theme(panel.grid = element_blank(), 
    axis.ticks = element_line(),
    axis.text.y = element_text(angle = 90, hjust = 0.5),
    axis.title.x = element_text(margin = margin(t = 10,r = 0,b=0,l=0)),
    axis.title.y = element_text(margin = margin(t = 0,r = 10,b=0,l=0))) +
  labs(title = "", x = "X", y = "Y")

# MK home trajectories (excluding two trajectories in Kanton of Graub√ºnden)
posmoMK_home <- filter(posmo_MK, !trajectoryID %in% c("T2", "T3"))

# Visualization of all home trajectories of MK
posmoMK_home |> 
  ggplot(aes(X, Y, group = trajectoryID)) +
  geom_path(col = "black", alpha = 0.3, size = 0.6) +
  coord_equal(ratio = 1) +
  theme(legend.position = "none") +
  theme_minimal()+
  theme(panel.grid = element_blank(), 
    axis.ticks = element_line(),
    axis.text.y = element_text(angle = 90, hjust = 0.5),
    axis.title.x = element_text(margin = margin(t = 10,r = 0,b=0,l=0)),
    axis.title.y = element_text(margin = margin(t = 0,r = 10,b=0,l=0))) +
  labs(title = "", x = "X", y = "Y")

```

##Trajectories visualization with and without static points 
```{r}
## Two from Margarita
K1 <- posmo %>%
  filter(trajectoryID == "T1")

K1_filter <- posmo_filter %>%
  filter(trajectoryID == "T1")
  
K1a <- ggplot(K1, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()

K1b <- ggplot(K1_filter, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

plot_grid(K1a, K1b, 
         labels = c("Raw", "Static points removed"),
          hjust = c(-2,-0.4),
          vjust = 2.5,
          ncol = 2, nrow = 1)

K14 <- posmo %>%
  filter(trajectoryID == "T14")

K14_filter <- posmo_filter %>%
  filter(trajectoryID == "T14")
  
K14a <- ggplot(K5, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()

K14b <- ggplot(K5_filter, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

plot_grid(K14a, K14b, 
         labels = c("Raw", "Static points removed"),
          hjust = c(-2,-0.4),
          vjust = 6,
          ncol = 2, nrow = 1)

## Two from Mirjam
M1 <- posmo %>%
  filter(trajectoryID == "12")


M1_filer <- posmo_filter %>%
  filter(trajectoryID == "12")

M1a <- ggplot(M1, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()

M1b <- ggplot(M1_filer, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

plot_grid(M1a, M1b, 
          labels = c("Raw", "Static points removed"),
          hjust = c(-2,-0.4),
          vjust = 4,
          ncol = 2, nrow = 1)

M26 <- posmo %>%
  filter(trajectoryID == "26")


M26_filter <- posmo_filter %>%
  filter(trajectoryID == "26")
  
M26a <- ggplot(M26, aes(X, Y))+
  geom_path()+
  geom_point(color  = "blue")+
  coord_fixed()

M26b <- ggplot(M26_filter, aes(X, Y))+
  geom_path()+
    geom_point()+
    coord_fixed()

plot_grid(M26a, M26b, 
          labels = c("Raw", "Static points removed"),
          hjust = c(-5.1,-1),
          vjust = 1,
          ncol = 2, nrow = 1)

```

#Timelag. 
How often was the position recorded. Calculated for the trajectories with and without (posmo_filter) static points
```{r}
posmo <- posmo |> 
    group_by(trajectoryID)|> 
    mutate(timelag = as.numeric(difftime(lead(datetime), datetime, units = "secs")))

posmo_filter <- posmo_filter |> 
    group_by(trajectoryID)|> 
    mutate(timelag = as.numeric(difftime(lead(datetime), datetime, units = "secs")))

 ggplot(posmo, aes(timelag)) +
  geom_histogram(binwidth = 5) +
  geom_vline(xintercept = mean(posmo$timelag, na.rm = TRUE))

which(posmo$timelag> 300)#The threshold was set at 300 (15*20), sometimes we had pauses of up to 20 minutes during the walks that recorded the same location several times
which(posmo$timelag> 500)
which(posmo$timelag> 1000)

 
```

##Visualization of the groups of points that show unreaslistic time lags 
```{r}
library(tmap)
tmap_mode("view")
posmo[18755:18765,] |> tm_shape() + tm_dots()

```

#Steplenght, distance covered and speed calculation
```{r}
#calculation with the whole trajectories 

posmo <- posmo |>
  group_by(trajectoryID) |> 
  mutate(steplenght = sqrt ((X-lead(X))^2 + (Y-lead(Y))^2))|>
  mutate(speed = steplenght/timelag)|>
  mutate(duration = (max(datetime)- min(datetime))/60)|>
  mutate(distance = sum(steplenght, na.rm = TRUE))


#calculation with the trajectories without static points
posmo_filter <- posmo_filter |>
  group_by(trajectoryID) |> 
  mutate(steplenght = sqrt ((X-lead(X))^2 + (Y-lead(Y))^2))|>
  mutate(speed = steplenght/timelag)|>
  mutate(duration = (max(datetime)- min(datetime))/60)|>
  mutate(distance = sum(steplenght, na.rm = TRUE))


ggplot(posmo, aes(steplenght)) +
  geom_histogram(binwidth = 5) +
  geom_vline(xintercept = mean(posmo$steplenght, na.rm = TRUE))

which(posmo$steplenght > 30)#30 meters in 15 seconds its an average
which(posmo$steplenght > 100)


```

##Visualization of the groups of points that show unreaslistic time lags 
```{r}
#more than 300 m
tmap_mode("view")
posmo[3090:3095,] |> tm_shape() + tm_dots()

```

#Visualization of parameters
```{r}
ggplot(posmo, mapping = aes(Type, steplenght))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Steplenght")+
  theme_light()  

ggplot(posmo, mapping = aes(Type, speed))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Speed [m/s]")+
  theme_light()

ggplot(posmo_filter, mapping = aes(Type, speed))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Speed [m/s]")+
  theme_light()#use this one for the report

ggplot(posmo, mapping = aes(Type, distance))+
  geom_boxplot() +
  labs(x = "Type of dog walking", y = "Distance [m]")+
  theme_light()

ggplot(posmo, mapping = aes(wday, distance))+
  geom_boxplot() +
  labs(x = "Day of week", y = "Distance [m]")+
  theme_light()

ggplot(posmo_filter, mapping = aes(wday, speed))+
  geom_boxplot() +
  labs(x = "Day of week", y = "Speed [m/s]")+
  theme_light()

ggplot(posmo, mapping = aes(precip, distance))+
  geom_boxplot() +
  labs(x = "Precipitation", y = "Distance [m]")+
  theme_light()  

ggplot(posmo, mapping = aes(precip, speed))+
  geom_boxplot() +
  labs(x = "Precipitation", y = "Speed [m/s]")+
  theme_light()


# Pie chart of trajectory shapes
plot_ly(shape_summary, labels = ~Shape, values = ~percent, type = 'pie') %>%
  layout(title = "Trajectory Shapes",          
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

# Pie chart of type of walk (recreational/functional)
plot_ly(Type_summary, labels = ~Type, values = ~percent, type = 'pie') %>%
  layout(title = "Type of walk",          
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))

# Pie chart of walks in precipitation/no precipitation
plot_ly(precip_summary, labels = ~precip, values = ~percent, type = 'pie') %>%
  layout(title = "Precipitation",          
         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
        
```

## Plotting more trajectories
```{r}

T2 <- posmo %>%
  filter(trajectoryID == "T2")

ggplot(T2, aes(X, Y))+
  geom_path()+
  geom_point()+coord_fixed()

T3 <- posmo %>%
  filter(trajectoryID == "T3")

ggplot(T3, aes(X, Y))+
  geom_path()+
  geom_point()+coord_fixed()

T8 <- posmo %>%
  filter(trajectoryID == "T8")

ggplot(T8, aes(X, Y))+
  geom_path()+
    geom_point()+coord_fixed()
```

## Frechet Distance
```{r}
#randomly select trajectories to compare for MN
x <- sample(1:56, 1)
x
# Functional: 4, 36, 55, 21. Recreational: 6, 39, 49, 53

#randomly select trajectories to compare for MK
x1 <- sample(1:48, 1)
x1
#Functional: T11, T35, T43, T16. Recreational: T40, T20, T27, T25

library(SimilarityMeasures)
#Create the matrices for the trajectories to compare from MN: 6 (morning) and 39 (afternoon), from MK T20 (morning), T40 (afternoon)

Traj6MN <- posmo |> 
  ungroup() |>
  st_drop_geometry() |>
  filter(trajectoryID == 6)|>
  mutate(Datetime_int = as.integer(datetime))|>
  select(X, Y, Datetime_int)

Traj6MN <- as.matrix(Traj6MN)

Traj39MN <- posmo |> 
  ungroup() |>
  st_drop_geometry() |>
  filter(trajectoryID == 39)|>
  mutate(Datetime_int = as.integer(datetime))|>
  select(X, Y, Datetime_int)

Traj39MN <- as.matrix(Traj39MN)

Traj20MK <- posmo |> 
 ungroup() |>
  st_drop_geometry() |>
  filter(trajectoryID == "T20")|>
  mutate(Datetime_int = as.integer(datetime))|>
  select(X, Y, Datetime_int)

Traj20MK <- as.matrix(Traj20MK)

Traj40MK <- posmo |> 
 ungroup() |>
  st_drop_geometry() |>
  filter(trajectoryID == "T40")|>
  mutate(Datetime_int = as.integer(datetime))|>
  select(X, Y, Datetime_int)

Traj40MK <- as.matrix(Traj40MK)

frechet_MN <- Frechet(Traj6MN, Traj39MN)
frechet_MK <- Frechet(Traj20MK, Traj40MK)

frechet_all <- rbind(frechet_MN, frechet_MK)

```


```{r}
arealstat_csv <- read_csv("data-raw/arealstatistik/ag-b-00.03-37-nolc04/AREA_NOLC04_27_161114.csv",                          col_types = cols_only(X = col_integer(), Y = col_integer(),LC09_27 = col_integer(),LC09_6 = col_integer())) %>%  transmute(E = X + 2e6, N = Y + 1e6, hauptbereiche6 = LC09_6, grundkat27 = LC09_27) # This is not a precise transformation 21781 > 2056 but it seems this method was used on the newer data as wellarealstat_hauptbereiche <- arealstat_csv %>% dplyr::select(E,N,hauptbereiche6) %>%  rasterFromXYZ() %>%  terra::rast()
terra::crs(arealstat_hauptbereiche) <- "EPSG: 2056" 
arealstat_grundkategorien <- arealstat_csv %>%  dplyr::select(E,N,grundkat27) %>%  rasterFromXYZ() %>%  terra::rast()terra::crs(arealstat_grundkategorien) <- "EPSG: 2056"# usethis::use_data(arealstat_hauptbereiche, overwrite = TRUE) # usethis::use_data(arealstat_grundkategorien, overwrite = TRUE) terra::writeRaster(arealstat_grundkategorien, "inst/extdata/arealstat_boden_grundkategrien.tif", overwrite = TRUE, datatype = "INT1U") terra::writeRaster(arealstat_hauptbereiche, "inst/extdata/arealstat_boden_hauptbereiche.tif", overwrite = TRUE, datatype = "INT1U")
```


